@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "./size";

@function slugify($text) {
    $split: string.split($text, "");
    $result: null;
    $length: calc(list.length($split) + 1);

    @for $i from 1 to $length {
        $char-lower: string.to-lower-case(list.nth($split, $i));
        $result: if($char-lower ==" ", "#{$result}-", "#{$result}#{$char-lower}");
    }

    @return $result;
}

;

// Size
$sizes: (
    xs:size.$xs,
    sm:size.$sm,
    md:size.$md,
    lg:size.$lg,
    xl:size.$xl,
    xxl:size.$xxl,
    xxxl:size.$xxxl
);

@each $size, $val in $sizes {
    .text-#{$size} {
        font-size: $val;
    }
}


// Decoration
.underline {
    text-decoration: underline;
}

@mixin text-stroke($color) {
    text-shadow: -1px -1px 0 $color, -1px 1px 0 $color, 1px 1px 0 $color, 1px -1px $color, ;
}

// Position
$positions: left, right, center;

@each $p in $positions {
    .text-#{$p} {
        text-align: $p;
    }
}

// Fonts

@font-face {
    font-family: RGHPPsans;
    src: url("/assets/font/RGHPPSans.otf");
}

@mixin font-family($name, $weights: null, $args...) {
    $class-name: slugify($name);

    @if($weights) {
        @each $weight in $weights {
            $weight-lower: string.to-lower-case($weight);

            .font-#{$class-name}-#{$weight-lower} {
                font-family: '#{$name} #{$weight}';
            }
        }
    }

    .font-#{$class-name} {
        font-family: $args;
    }
}


$fonts: (
    "Comic Sans": ("Comic Sans MS", "Comic Sans", cursive),
    "Revenge":(RGHPPsans),
    "Roboto":(Roboto),
    "Georgia":(Georgia, serif),
);

$weights: (
    "Roboto":("Thin",
        "Light",
        "Medium",
        "Black")
);

@each $font, $args in $fonts {
    $font-weights: map.get($weights, $font);
    @include font-family($font, $font-weights, $args);
}

@mixin font($font) {
    font-family: map.get($fonts, $font);
}